        -:    0:Source:D:/Project_mp/testfinal/Modbus1/HoldingReg.c
        -:    0:Programs:14
        -:    1:#include "testingdata.h"
        -:    2:unsigned int a, b;
        -:    3:unsigned int bytes;
        -:    4:
        -:    5:// ModbusTcpRxBuf
        -:    6:// ModbusTcpTxBuf
        -:    7:/*
        -:    8: Parametes
        -:    9: * ModbusPacketParser
        -:   10: * 
        -:   11: * 1.DataRegister
        -:   12: * 2.ModbusTcpRxBuf - QUERY Buffer
        -:   13: * 3.ModbusTcpTxBuf - Response Buffer
        -:   14: * 
        -:   15: * Return
        -:   16: * No of bytes to send
        -:   17: * Bit Test
        -:   18: * 
        -:   19: * 0000 1000
        -:   20: * 0001 0000
        -:   21: * ---------
        -:   22: * 0000 0000
        -:   23: * 
        -:   24: * 0001 1000
        -:   25: * 0001 0000
        -:   26: * ---------
        -:   27: * 0001 0000
        -:   28: * 
        -:   29: 
        -:   30:
        -:   31://|   dff    |
        -:   32://|          |
        -:   33://  2 bytes
        -:   34:
        -:   35://parse->TransactionID.v[0] = *DataRegister;
        -:   36://  parse->TransactionID.v[1] = *DataRegister++;
        -:   37:
        -:   38:QUERY FRAME:
        -:   39:
        -:   40:| Transaction Identifier | Protocol Identifier | Length | Unit Identifier | Function Code | Starting Address | Quantity of Registers |
        -:   41:|------------------------|---------------------|--------|-----------------|---------------|------------------|-----------------------|
        -:   42:|       2 bytes          |      2 bytes        |2 bytes |      1 byte     |     1 byte    |     2 bytes      |       2 bytes         |
        -:   43:
        -:   44:RESPONSE FRAME:
        -:   45:
        -:   46:| Transaction Identifier | Protocol Identifier | Length | Unit Identifier | Function Code | Byte Count | Data                |
        -:   47:|------------------------|---------------------|--------|-----------------|---------------|------------|---------------------|
        -:   48:|       2 bytes          |      2 bytes        |2 bytes |      1 byte     |     1 byte    |   1 byte   | Variable (n bytes)  |
        -:   49:
        -:   50: * INPUT FRAME  = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x03, 0x00, 0x6, 0x00, 0x03} - 12 bytes
        -:   51: * DATAREGISTER = {0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x0009, 0x0008, 0x0007, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0025, 0x0035, 0x0036, 0x9957, 0x7890}
        -:   52:
        -:   53: * The Query Message specifies the starting register and Quantity of registers to be read
        -:   54: * This Query Request to read 3 register values from starting address 0x06 (0x06, 0x07, 0x08)
        -:   55: * RESPONSE FRAME = {0x0, 0x1, 0x2, 0x3, 0x0, 0x9, 0x10, 0x3, 0x6, 0x0, 0x6, 0x0, 0x7, 0x0, 0x8} - 15 bytes(9 bytes + (2* no of Registers))
        -:   56: * 
        -:   57: * when error detected :
        -:   58: * RESPONSE FRAME = {0x0, 0x1, 0x2, 0x3, 0x0, 0x3, 0x10, 0x91, 0x1} - 9 bytes
        -:   59: */ 
        -:   60:
        -:   61:
        -:   62:
        -:   63:
        -:   64:WORD
        1:   65:ReadHoldingRegisters (BYTE *ModbusTcpTxBuf, WORD *DataRegister, parse1 *parse)
        -:   66:{
        -:   67:   
        -:   68:   
        1:   69:  ModbusTcpTxBuf[0] = parse->TransactionID.v[1];
        1:   70:  ModbusTcpTxBuf[1] = parse->TransactionID.v[0];
        -:   71:
        1:   72:  ModbusTcpTxBuf[2] = parse->ProtocolID.v[1];
        1:   73:  ModbusTcpTxBuf[3] = parse->ProtocolID.v[0];
        -:   74:
        1:   75:  ModbusTcpTxBuf[4] = 0X0;
        -:   76:
        -:   77:  // Output[5] = 0X3 + Output[8];
        1:   78:  ModbusTcpTxBuf[6] = parse->UnitID;
        1:   79:  ModbusTcpTxBuf[7] = parse->FunctionCode;
        1:   80:  ModbusTcpTxBuf[8] = (char)(parse->NumberofRegister.Val * 2);
        1:   81:  ModbusTcpTxBuf[5] = ModbusTcpTxBuf[8]+ 0X03;
        -:   82:
        4:   83:  for (a = 0; a < parse->NumberofRegister.Val; a++)
        -:   84:    {
        3:   85:      b = a * 2;
        -:   86:
        3:   87:      ModbusTcpTxBuf[9 + b] = DataRegister[parse->StartAddress.Val + a] / 0x100;
        3:   88:      ModbusTcpTxBuf[10 + b] = DataRegister[parse->StartAddress.Val + a] % 0x100;
        -:   89:    }
        -:   90:  
        1:   91:  bytes = 0x9 + ModbusTcpTxBuf[8];
        1:   92:  return bytes;
        -:   93:  //return &ModbusTcpTxBuf;
        -:   94:}
        -:   95:
