        -:    0:Source:D:/Project_mp/testfinal/Modbus1/readinputstatus.c
        -:    0:Programs:14
        -:    1:#include "testingdata.h"
        -:    2://#define bitcheck(byte,nbit) ((byte) &   (1<<(nbit)))
        -:    3:#define SET(x,y)  x |= (1 << y) 
        -:    4:#define READ(x,y)  ((0u == (x & (1<<y)))?0u:1u)
        -:    5:unsigned int NoOfBits, Regbit, reg, RegbitTx, regTx, byte_index, bit_count,wordOffset;
        -:    6:WORD Txtempbuf[100];
        -:    7:unsigned int byte_count, h, bit_index, coil_index, limit, coil_bit;
        -:    8:unsigned int TempReg;
        -:    9:
        -:   10://unsigned char byteValue;
        -:   11:
        -:   12:/* Basic bit manipulation macros
        -:   13:   No one should ever have to rewrite these
        -:   14:
        -:   15://Set bit y (0-indexed) of x to '1' by generating a a mask with a '1' in the proper bit location and ORing x with the mask.
        -:   16:
        -:   17:#define SET(x,y) x |= (1 << y)
        -:   18:
        -:   19://Set bit y (0-indexed) of x to '0' by generating a mask with a '0' in the y position and 1's elsewhere then ANDing the mask with x.
        -:   20:
        -:   21:#define CLEAR(x,y) x &= ~(1<< y)
        -:   22:
        -:   23://Return '1' if the bit value at position y within x is '1' and '0' if it's 0 by ANDing x with a bit mask where the bit in y's position is '1' and '0' elsewhere and comparing it to all 0's.  Returns '1' in least significant bit position if the value of the bit is '1', '0' if it was '0'.
        -:   24:
        -:   25:#define READ(x,y) ((0u == (x & (1<<y)))?0u:1u)
        -:   26:
        -:   27://Toggle bit y (0-index) of x to the inverse: '0' becomes '1', '1' becomes '0' by XORing x with a bitmask where the bit in position y is '1' and all others are '0'.
        -:   28:
        -:   29:#define TOGGLE(x,y) (x ^= (1<<y))
        -:   30:
        -:   31: */
        -:   32:
        -:   33:WORD
        2:   34:readinputstatus(BYTE *ModbusTcpTxBuf, WORD * InputRegister, parse1 *parse) {
        -:   35:
        -:   36:    // WORD dummy[100];
        -:   37:
        2:   38:    ModbusTcpTxBuf[0] = parse->TransactionID.v[1];
        2:   39:    ModbusTcpTxBuf[1] = parse->TransactionID.v[0];
        -:   40:
        2:   41:    ModbusTcpTxBuf[2] = parse->ProtocolID.v[1];
        2:   42:    ModbusTcpTxBuf[3] = parse->ProtocolID.v[0];
        -:   43:
        2:   44:    ModbusTcpTxBuf[4] = 0X0;
        -:   45:
        2:   46:    ModbusTcpTxBuf[6] = parse->UnitID;
        2:   47:    ModbusTcpTxBuf[7] = parse->FunctionCode;
        -:   48:
        2:   49:    byte_count = (parse->NumberofRegister.Val / 0x8) + 1;
        2:   50:    ModbusTcpTxBuf[8] = byte_count;
        -:   51:    //byte_index = 9;
        2:   52:    ModbusTcpTxBuf[5] = 0x03 + byte_count;
        -:   53:
        2:   54:    NoOfBits = parse->NumberofRegister.Val;
        -:   55:
        -:   56:
        6:   57:    for (bit_count = 0; bit_count < NoOfBits; bit_count++) // byte count 
        -:   58:    {
        4:   59:        Regbit = (parse->StartAddress.Val + bit_count -1) % 16; // 20 - 1 % 16 = 4th bit
        4:   60:        reg = (parse->StartAddress.Val + bit_count -1) / 16; // 20 - 1 /16 = 1st  reg
        4:   61:        RegbitTx = (bit_count) % 16; // 20 - 1 % 16 = 4th bit -- bit increment
        4:   62:        regTx = (bit_count) / 16; // 20 - 1 /16 = 1st  reg -- register increment
        -:   63:        
        -:   64:    
        4:   65:        coil_bit = READ(InputRegister[reg], Regbit);
        4:   66:        Txtempbuf[regTx] |=  coil_bit << RegbitTx;
        -:   67:        
        -:   68:    
        -:   69:    }
        -:   70:
        4:   71:    for (byte_index = 0; byte_index < (regTx+1); byte_index++) {
        -:   72:        //4times
        2:   73:        wordOffset = byte_index * 2;
        2:   74:        ModbusTcpTxBuf[9 + wordOffset] = (Txtempbuf[byte_index] % 0x100);
        2:   75:        ModbusTcpTxBuf[10 + wordOffset] = (Txtempbuf[byte_index] / 0x100);
        -:   76:    }
        -:   77:
        2:   78:    limit = ModbusTcpTxBuf[5] + 0x6;
        2:   79:    return limit;
        -:   80:}
        -:   81:
