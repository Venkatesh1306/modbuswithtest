        -:    0:Source:D:/Project_mp/testfinal/Modbus1/FrameFunction.c
        -:    0:Programs:14
        -:    1:#include "testingdata.h"
        -:    2:
        -:    3:
       21:    4:WORD frame_function(BYTE *ModbusTcpRxBuf, WORD *DataRegister, WORD *InputRegister, unsigned short int *COIL, parse1 *parse, BYTE *ModbusTcpTxBuf, unsigned int *ModbusTxLength)
        -:    5:{
       21:    6:  deserialize(parse, ModbusTcpRxBuf);
       44:    7:  if (!(parse->FunctionCode == ReadCoilStatus ||
       36:    8:        parse->FunctionCode == ReadInputStatus ||
       32:    9:        parse->FunctionCode == ReadHoldingRegister ||
       28:   10:        parse->FunctionCode == ReadInputRegisters ||
       23:   11:        parse->FunctionCode == ForceSingleCoil ||
       17:   12:        parse->FunctionCode == PresetSingleRegister ||
        7:   13:        parse->FunctionCode == ForceMultipleCoils ||
        4:   14:        parse->FunctionCode == PresetMultipleRegisters))
        -:   15:  {
        1:   16:    parse->FunctionCode = parse->FunctionCode + 0x80;
        1:   17:    modbuserror(parse, ModbusTcpTxBuf, Illegal_Function_Code);
        -:   18:  }
       38:   19:  else if (parse->FunctionCode == ReadHoldingRegister ||
       34:   20:           parse->FunctionCode == ReadInputRegisters ||
       16:   21:           parse->FunctionCode == PresetMultipleRegisters)
        -:   22:  {
       18:   23:    if ((parse->StartAddress.Val > (int)(DataRegistersize)) ||
        4:   24:        ((parse->StartAddress.Val + parse->NumberofRegister.Val) > (int)(DataRegistersize)))
        -:   25:    {
        3:   26:      parse->FunctionCode = parse->FunctionCode + 0x80;
        3:   27:      modbuserror(parse, ModbusTcpTxBuf, Illegal_Data_Address);
        3:   28:      *ModbusTxLength = 0x9;
        -:   29:    }
        -:   30:  }
       24:   31:  else if (parse->FunctionCode == ReadCoilStatus ||
       20:   32:           parse->FunctionCode == ReadInputStatus ||
        9:   33:           parse->FunctionCode == ForceMultipleCoils)
        -:   34:  {
       18:   35:    if ((parse->StartAddress.Val > (int)(DataRegister1size)) ||
        4:   36:        ((parse->StartAddress.Val + parse->NumberofRegister.Val) > (int)(DataRegister1size)))
        -:   37:    {
        3:   38:      parse->FunctionCode = parse->FunctionCode + 0x80;
        3:   39:      modbuserror(parse, ModbusTcpTxBuf, Illegal_Data_Address);
        3:   40:      *ModbusTxLength = 0x9;
        -:   41:    }
        -:   42:  }
        6:   43:  else if (parse->FunctionCode == ForceSingleCoil)
        -:   44:  {
        3:   45:    if (parse->StartAddress.Val > (int)(DataRegister1size))
        -:   46:    {
        1:   47:      parse->FunctionCode = parse->FunctionCode + 0x80;
        1:   48:      modbuserror(parse, ModbusTcpTxBuf, Illegal_Data_Address);
        1:   49:      *ModbusTxLength = 0x9;
        -:   50:    }
        -:   51:  }
        3:   52:  else if (parse->FunctionCode == PresetSingleRegister)
        -:   53:  {
        3:   54:    if (parse->StartAddress.Val > (int)(DataRegistersize))
        -:   55:    {
        1:   56:      parse->FunctionCode = parse->FunctionCode + 0x80;
        1:   57:      modbuserror(parse, ModbusTcpTxBuf, Illegal_Data_Address);
        1:   58:      *ModbusTxLength = 0x9;
        -:   59:    }
        -:   60:  }
        -:   61:
       21:   62:  if (parse->FunctionCode == ReadHoldingRegister)
        -:   63:  {
        1:   64:    *ModbusTxLength = ReadHoldingRegisters(ModbusTcpTxBuf, DataRegister, parse);
        -:   65:  }
       21:   66:  if (parse->FunctionCode == ReadCoilStatus)
        -:   67:  {
        1:   68:    *ModbusTxLength = readcoilstatus(ModbusTcpTxBuf, DataRegister, parse);
        -:   69:  }
       21:   70:  if (parse->FunctionCode == ForceSingleCoil)
        -:   71:  {
        2:   72:    *ModbusTxLength = forcesinglecoil(ModbusTcpTxBuf, COIL, parse);
        -:   73:  }
       21:   74:  if (parse->FunctionCode == PresetMultipleRegisters)
        -:   75:  {
        2:   76:    *ModbusTxLength = presetmultipleregisters(ModbusTcpTxBuf, DataRegister, parse);
        -:   77:  }
       21:   78:  if (parse->FunctionCode == PresetSingleRegister)
        -:   79:  {
        2:   80:    *ModbusTxLength = presetsingleregister(ModbusTcpTxBuf, DataRegister, parse);
        -:   81:  }
       21:   82:  if (parse->FunctionCode == ReadInputRegisters)
        -:   83:  {
        1:   84:    *ModbusTxLength = ReadInputReg(ModbusTcpTxBuf, InputRegister, parse);
        -:   85:  }
       21:   86:  if (parse->FunctionCode == ReadInputStatus)
        -:   87:  {
        1:   88:    *ModbusTxLength = readinputstatus(ModbusTcpTxBuf, InputRegister, parse);
        -:   89:  }
       21:   90:  if (parse->FunctionCode == ForceMultipleCoils)
        -:   91:  {
        2:   92:    *ModbusTxLength = forcemultiplecoils(ModbusTcpTxBuf, COIL, parse);
        -:   93:  }
       21:   94:   return *ModbusTxLength;
        -:   95:}
