        -:    0:Source:D:/Project_mp/testfinal/Modbus1/FrameFunction.c
        -:    0:Programs:14
        -:    1:#include "testingdata.h"
        -:    2:// void modbuserror(parse1 parse, BYTE *ModbusTcpTxBuf, unsigned char exceptioncode);
        -:    3:// BYTE ModbusTcpTxBuf[25];
        -:    4:// BYTE ModbusTcpRxBuf[25] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x03, 0x00, 0x02, 0x00, 0x02, 0x01, 0x03, 0x03};
        -:    5:// WORD ModbusTxLength;
        -:    6:// WORD DataRegister[26] = {0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x0009, 0x0008, 0x0007, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0025, 0x0035, 0x0036, 0x9957, 0x7890};
        -:    7:
        -:    8:unsigned char COIL[100] = {0};
        6:    9:WORD frame_function(BYTE *ModbusTcpRxBuf, WORD *DataRegister, WORD *InputRegister, unsigned char *COIL, parse1 *parse, BYTE *ModbusTcpTxBuf, unsigned int *ModbusTxLength)
        -:   10:{
        -:   11:
        6:   12:    deserialize(parse, ModbusTcpRxBuf);
        -:   13:
       12:   14:    if (!(parse->FunctionCode == ReadCoilStatus ||
       10:   15:          parse->FunctionCode == ReadInputStatus ||
        8:   16:          parse->FunctionCode == ReadHoldingRegister ||
        6:   17:          parse->FunctionCode == ReadInputRegisters ||
        4:   18:          parse->FunctionCode == ForceSingleCoil ||
        4:   19:          parse->FunctionCode == PresetSingleRegister ||
        2:   20:          parse->FunctionCode == ForceMultipleCoils ||
    #####:   21:          parse->FunctionCode == PresetMultipleRegisters))
        -:   22:    {
    #####:   23:        parse->FunctionCode = parse->FunctionCode + 0x80;
    #####:   24:        modbuserror(parse, ModbusTcpTxBuf, Illegal_Function_Code);
    #####:   25:        *ModbusTxLength = 0x9;
        -:   26:        //      modbuserror(&parsedes, &ModbusTcpTxBuf,exceptioncode);
        -:   27:        // modbuserror(&parsedes,&ModbusTcpTxBuf[0],Illegal_Function_Code);
        -:   28:    }
       12:   29:    else if ((parse->StartAddress.Val > ((int)(DataRegistersize)-1)) ||
        6:   30:             (((parse->StartAddress.Val - 1 + parse->NumberofRegister.Val) > (int)(DataRegistersize)) && parse->FunctionCode != PresetSingleRegister) && (parse->FunctionCode != 0x01))
        -:   31:    {
    #####:   32:        parse->FunctionCode = parse->FunctionCode + 0x80;
    #####:   33:        modbuserror(parse, ModbusTcpTxBuf, Illegal_Data_Address);
    #####:   34:        *ModbusTxLength = 0x9;
        -:   35:    }
        -:   36:
        -:   37:    //    else if(
        -:   38:    //            )
        -:   39:
        6:   40:    if (parse->FunctionCode == ReadHoldingRegister)
        -:   41:    {
    #####:   42:        *ModbusTxLength = ReadHoldingRegisters(ModbusTcpTxBuf, DataRegister, parse);
        -:   43:    }
        6:   44:    if (parse->FunctionCode == ReadCoilStatus)
        -:   45:    {
    #####:   46:        *ModbusTxLength = readcoilstatus(ModbusTcpTxBuf, DataRegister, parse);
        -:   47:    }
        6:   48:    if (parse->FunctionCode == ForceSingleCoil)
        -:   49:    {
    #####:   50:        *ModbusTxLength = forcesinglecoil(ModbusTcpTxBuf, COIL, parse);
        -:   51:    }
        6:   52:    if (parse->FunctionCode == PresetMultipleRegisters)
        -:   53:    {
    #####:   54:        *ModbusTxLength = presetmultipleregisters(ModbusTcpTxBuf, DataRegister, parse);
        -:   55:    }
        6:   56:    if (parse->FunctionCode == PresetSingleRegister)
        -:   57:    {
    #####:   58:        *ModbusTxLength = presetsingleregister(ModbusTcpTxBuf, DataRegister, parse);
        -:   59:    }
        6:   60:    if (parse->FunctionCode == ReadInputRegisters)
        -:   61:    {
        2:   62:        *ModbusTxLength = ReadInputReg(ModbusTcpTxBuf, InputRegister, parse);
        -:   63:    }
        6:   64:    if (parse->FunctionCode == ReadInputStatus)
        -:   65:    {
        2:   66:        *ModbusTxLength = readinputstatus(ModbusTcpTxBuf, InputRegister, parse);
        -:   67:    }
        6:   68:    if (parse->FunctionCode == ForceMultipleCoils)
        -:   69:    {
        2:   70:        *ModbusTxLength = forcemultiplecoils (ModbusTcpTxBuf, COIL , parse);
        -:   71:    }
        -:   72:
        6:   73:    return *ModbusTxLength;
        -:   74:}
