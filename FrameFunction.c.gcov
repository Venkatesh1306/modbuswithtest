        -:    0:Source:D:/Project_mp/testfinal/Modbus1/FrameFunction.c
        -:    0:Programs:14
        -:    1:#include "testingdata.h"
        -:    2:
        3:    3:WORD frame_function(BYTE *ModbusTcpRxBuf, WORD *DataRegister, WORD *InputRegister, unsigned short int *COIL, parse1 *parse, BYTE *ModbusTcpTxBuf, unsigned int *ModbusTxLength)
        -:    4:{
        -:    5:
        3:    6:    deserialize(parse, ModbusTcpRxBuf);
        -:    7:
        6:    8:    if (!(parse->FunctionCode == ReadCoilStatus ||
        5:    9:        parse->FunctionCode == ReadInputStatus ||
        4:   10:        parse->FunctionCode == ReadHoldingRegister ||
        3:   11:        parse->FunctionCode == ReadInputRegisters ||
        2:   12:        parse->FunctionCode == ForceSingleCoil ||
        2:   13:        parse->FunctionCode == PresetSingleRegister ||
        1:   14:        parse->FunctionCode == ForceMultipleCoils ||
    #####:   15:        parse->FunctionCode == PresetMultipleRegisters
        -:   16:        ))
        -:   17:    {
    #####:   18:      parse->FunctionCode = parse->FunctionCode + 0x80;
    #####:   19:      modbuserror (parse, ModbusTcpTxBuf, Illegal_Function_Code);
        -:   20:
        -:   21:    }
        -:   22:  else if
        5:   23:    (parse->FunctionCode == ReadInputStatus ||
        4:   24:     parse->FunctionCode == ReadHoldingRegister ||
        3:   25:     parse->FunctionCode == ReadInputRegisters ||
        1:   26:     parse->FunctionCode == PresetMultipleRegisters)
        -:   27:    {
        6:   28:      if ((parse->StartAddress.Val > (int) (DataRegistersize)) ||
        2:   29:          ((parse->StartAddress.Val + parse->NumberofRegister.Val) > (int) (DataRegistersize)))
        -:   30:        {
    #####:   31:          parse->FunctionCode = parse->FunctionCode + 0x80;
    #####:   32:          modbuserror (parse, ModbusTcpTxBuf, Illegal_Data_Address);
    #####:   33:          *ModbusTxLength = 0x9;
        -:   34:        }
        -:   35:    }
        -:   36:  else if
        1:   37:    (parse->FunctionCode == ForceSingleCoil)
        -:   38:    {
    #####:   39:      if (parse->StartAddress.Val / 16 > (int) (DataRegistersize))
        -:   40:        {
    #####:   41:          parse->FunctionCode = parse->FunctionCode + 0x80;
    #####:   42:          modbuserror (parse, ModbusTcpTxBuf, Illegal_Data_Address);
    #####:   43:          *ModbusTxLength = 0x9;
        -:   44:        }
        -:   45:    }
        -:   46:  else if
        1:   47:    (parse->FunctionCode == PresetSingleRegister)
        -:   48:    {
    #####:   49:      if (parse->StartAddress.Val > (int) (DataRegistersize))
        -:   50:        {
    #####:   51:          parse->FunctionCode = parse->FunctionCode + 0x80;
    #####:   52:          modbuserror (parse, ModbusTcpTxBuf, Illegal_Data_Address);
    #####:   53:          *ModbusTxLength = 0x9;
        -:   54:        }
        -:   55:    }
        -:   56:
        -:   57:
        -:   58:
        -:   59:
        3:   60:    if (parse->FunctionCode == ReadHoldingRegister)
        -:   61:    {
    #####:   62:        *ModbusTxLength = ReadHoldingRegisters(ModbusTcpTxBuf, DataRegister, parse);
        -:   63:    }
        3:   64:    if (parse->FunctionCode == ReadCoilStatus)
        -:   65:    {
    #####:   66:        *ModbusTxLength = readcoilstatus(ModbusTcpTxBuf, DataRegister, parse);
        -:   67:    }
        3:   68:    if (parse->FunctionCode == ForceSingleCoil)
        -:   69:    {
    #####:   70:        *ModbusTxLength = forcesinglecoil(ModbusTcpTxBuf, COIL, parse);
        -:   71:    }
        3:   72:    if (parse->FunctionCode == PresetMultipleRegisters)
        -:   73:    {
    #####:   74:        *ModbusTxLength = presetmultipleregisters(ModbusTcpTxBuf, DataRegister, parse);
        -:   75:    }
        3:   76:    if (parse->FunctionCode == PresetSingleRegister)
        -:   77:    {
    #####:   78:        *ModbusTxLength = presetsingleregister(ModbusTcpTxBuf, DataRegister, parse);
        -:   79:    }
        3:   80:    if (parse->FunctionCode == ReadInputRegisters)
        -:   81:    {
        1:   82:        *ModbusTxLength = ReadInputReg(ModbusTcpTxBuf, InputRegister, parse);
        -:   83:    }
        3:   84:    if (parse->FunctionCode == ReadInputStatus)
        -:   85:    {
        1:   86:        *ModbusTxLength = readinputstatus(ModbusTcpTxBuf, InputRegister, parse);
        -:   87:    }
        3:   88:    if (parse->FunctionCode == ForceMultipleCoils)
        -:   89:    {
        1:   90:        *ModbusTxLength = forcemultiplecoils (ModbusTcpTxBuf, COIL , parse);
        -:   91:    }
        -:   92:
        3:   93:    return *ModbusTxLength;
        -:   94:}
