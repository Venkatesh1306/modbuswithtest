        -:    0:Source:D:/Project_mp/testfinal/Modbus1/presetsingleregister.c
        -:    0:Programs:14
        -:    1:#include "testingdata.h"
        -:    2:
        -:    3:/*QUERY FRAME:
        -:    4:| Transaction Identifier | Protocol Identifier | Length | Unit Identifier | Function Code | Address | Value |
        -:    5:|------------------------|---------------------|--------|-----------------|---------------|---------|-------|
        -:    6:|       2 bytes          |      2 bytes        |2 bytes |      1 byte     |     1 byte    |  2 bytes| 2 bytes|
        -:    7:
        -:    8:RESPONSE FRAME:
        -:    9:| Transaction Identifier | Protocol Identifier | Length | Unit Identifier | Function Code | Address | Value |
        -:   10:|------------------------|---------------------|--------|-----------------|---------------|---------|-------|
        -:   11:|       2 bytes          |      2 bytes        |2 bytes |      1 byte     |     1 byte    |  2 bytes| 2 bytes|
        -:   12: * 
        -:   13: * 
        -:   14: * Function Code - 06
        -:   15: * DataRegister[25]={0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x0009, 0x0008, 0x0007, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0025, 0x0035, 0x0036, 0x9957, 0x7890};
        -:   16: * INPUT FRAME = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x06, 0x00, 0x01, 0x00, 0x03}
        -:   17: *
        -:   18: * Preset Register 01 to 0x0003
        -:   19: * RESPONSE FRAME = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x10, 0x06, 0x00, 0x01, 0x00, 0x03}
        -:   20: * DATAREGISTER [] ={0x0000, 0x0003, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x0009, 0x0008, 0x0007, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0025, 0x0035, 0x0036, 0x9957, 0x7890}
        -:   21: * 
        -:   22: *When Error detected
        -:   23: * RESPONSE FRAME = {0x0, 0x1, 0x2, 0x3, 0x0, 0x3, 0x10, 0x86, 0x3} - 9 bytes
        -:   24: * DATAREGISTER UNMODIFIED.
        -:   25: * 
        -:   26: * 
        -:   27: */
        -:   28:
        2:   29:WORD presetsingleregister(BYTE *ModbusTcpTxBuf, WORD *DataRegister, parse1 *parse) {
        -:   30:    unsigned int length, data1, data2, DATA;
        -:   31:
        2:   32:    ModbusTcpTxBuf[0] = parse->TransactionID.v[1];
        2:   33:    ModbusTcpTxBuf[1] = parse->TransactionID.v[0];
        -:   34:
        2:   35:    ModbusTcpTxBuf[2] = parse->ProtocolID.v[1];
        2:   36:    ModbusTcpTxBuf[3] = parse->ProtocolID.v[0];
        -:   37:
        2:   38:    ModbusTcpTxBuf[4] = 0X0;
        2:   39:    ModbusTcpTxBuf[5] = parse->Length;
        -:   40:    // Output[5] = 0X3 + Output[8];
        2:   41:    ModbusTcpTxBuf[6] = parse->UnitID;
        2:   42:    ModbusTcpTxBuf[7] = parse->FunctionCode;
        -:   43:
        -:   44:
        -:   45:    //data1 = parse->NumberofRegister.v[0];
        -:   46:    //data2 = parse->NumberofRegister.v[1]*0x100;
        -:   47:    //DATA = data1 + data2;
        2:   48:    if (parse->NumberofRegister.Val >= 65000) {
        1:   49:        parse->FunctionCode = parse->FunctionCode + 128 ;
        1:   50:        modbuserror(parse, ModbusTcpTxBuf, Illegal_Data_Value);
        1:   51:        length = 0x9;
        -:   52:    } else {  
        1:   53:    DataRegister[parse->StartAddress.Val] = (parse->NumberofRegister.v[0] + parse->NumberofRegister.v[1]*0x100);
        -:   54:
        1:   55:    ModbusTcpTxBuf[8] = parse->StartAddress.v[1];
        1:   56:    ModbusTcpTxBuf[9] = parse->StartAddress.v[0];
        -:   57:
        1:   58:    ModbusTcpTxBuf[10] = parse->NumberofRegister.v[1]; //Preset Data Hi
        1:   59:    ModbusTcpTxBuf[11] = parse->NumberofRegister.v[0]; //Preset Data Lo
        -:   60:    //DataRegister[parse->StartAddress.Val] = parse->NumberofRegister.Val;
        1:   61:    length = 0x6 + parse->Length;
        -:   62:    }
        2:   63:    return length;
        -:   64:    
        -:   65:}
